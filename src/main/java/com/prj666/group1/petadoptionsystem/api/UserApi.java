/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prj666.group1.petadoptionsystem.api;

import java.util.Map;
import com.prj666.group1.petadoptionsystem.dto.ModelApiResponse;
import com.prj666.group1.petadoptionsystem.dto.User;
import com.prj666.group1.petadoptionsystem.dto.UserGetProfileGet200Response;
import com.prj666.group1.petadoptionsystem.dto.UserLoginPost200Response;
import com.prj666.group1.petadoptionsystem.dto.UserLoginPostRequest;
import com.prj666.group1.petadoptionsystem.dto.UserRegisterPostRequest;
import com.prj666.group1.petadoptionsystem.dto.UserUploadImagePost200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-11T16:53:22.577455-05:00[America/Toronto]", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "user", description = "Operations about Users (Both Adopters and Shelters)")
@RequestMapping("${openapi.petAdoptionSystem.base-path:}")
public interface UserApi {

    /**
     * DELETE /user/delete-profile/{id} : Delete a user profile
     * Deletes the user profile with the specified ID. Requires authentication and authorization.
     *
     * @param id The userId for the profile that needs to be deleted (required)
     * @return Generic API response (status code 204)
     *         or Generic API response (status code 400)
     *         or Generic API response (status code 401)
     *         or Generic API response (status code 403)
     *         or Generic API response (status code 404)
     */
    @Operation(
        operationId = "userDeleteProfileIdDelete",
        summary = "Delete a user profile",
        description = "Deletes the user profile with the specified ID. Requires authentication and authorization.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "403", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/user/delete-profile/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<ModelApiResponse> userDeleteProfileIdDelete(
        @Parameter(name = "id", description = "The userId for the profile that needs to be deleted", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    );


    /**
     * GET /user/get-profile : Retrieve user profile information
     * Fetches the profile details of the currently authenticated user (adopter or shelter).
     *
     * @return Profile details retrieved successfully (status code 200)
     *         or Generic API response (status code 401)
     */
    @Operation(
        operationId = "userGetProfileGet",
        summary = "Retrieve user profile information",
        description = "Fetches the profile details of the currently authenticated user (adopter or shelter).",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Profile details retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserGetProfileGet200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/get-profile",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserGetProfileGet200Response> userGetProfileGet(
        
    );


    /**
     * POST /user/login : Login a user
     * Logs in a user using email and password, and returns a user role and a JWT token.
     *
     * @param userLoginPostRequest  (required)
     * @return Login successful (status code 200)
     *         or Generic API response (status code 401)
     */
    @Operation(
        operationId = "userLoginPost",
        summary = "Login a user",
        description = "Logs in a user using email and password, and returns a user role and a JWT token.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserLoginPost200Response.class))
            }),
            @ApiResponse(responseCode = "401", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserLoginPost200Response> userLoginPost(
        @Parameter(name = "UserLoginPostRequest", description = "", required = true) @Valid @RequestBody UserLoginPostRequest userLoginPostRequest
    );


    /**
     * POST /user/preferences : Add preferences for pet attributes grouped by attribute groups
     * Submit a set of preferences for different attribute groups. Each key in the JSON object represents an attribute group name, and its corresponding value is a list of selected preferences 
     *
     * @param requestBody  (required)
     * @return Generic API response (status code 201)
     */
    @Operation(
        operationId = "userPreferencesPost",
        summary = "Add preferences for pet attributes grouped by attribute groups",
        description = "Submit a set of preferences for different attribute groups. Each key in the JSON object represents an attribute group name, and its corresponding value is a list of selected preferences ",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/preferences",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ModelApiResponse> userPreferencesPost(
        @Parameter(name = "request_body", description = "", required = true) @Valid @RequestBody Map<String, List<String>> requestBody
    );


    /**
     * POST /user/register : Register a new user
     * Registers a new user with an email, password, and account type (Pet Adopter or Pet Shelter).
     *
     * @param userRegisterPostRequest  (required)
     * @return Generic API response (status code 201)
     *         or Generic API response (status code 400)
     */
    @Operation(
        operationId = "userRegisterPost",
        summary = "Register a new user",
        description = "Registers a new user with an email, password, and account type (Pet Adopter or Pet Shelter).",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ModelApiResponse> userRegisterPost(
        @Parameter(name = "UserRegisterPostRequest", description = "", required = true) @Valid @RequestBody UserRegisterPostRequest userRegisterPostRequest
    );


    /**
     * PUT /user/update-profile : Update a user profile
     *
     * @param user  (required)
     * @return Generic API response (status code 200)
     */
    @Operation(
        operationId = "userUpdateProfilePut",
        summary = "Update a user profile",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/update-profile",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<ModelApiResponse> userUpdateProfilePut(
        @Parameter(name = "User", description = "", required = true) @Valid @RequestBody User user
    );


    /**
     * POST /user/upload-image : Upload an image for a user
     * Uploads a profile image for a user.
     *
     * @param image  (required)
     * @return Login successful (status code 200)
     *         or Generic API response (status code 400)
     */
    @Operation(
        operationId = "userUploadImagePost",
        summary = "Upload an image for a user",
        description = "Uploads a profile image for a user.",
        tags = { "user" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Login successful", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserUploadImagePost200Response.class))
            }),
            @ApiResponse(responseCode = "400", description = "Generic API response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ModelApiResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "BearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/upload-image",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    
    ResponseEntity<UserUploadImagePost200Response> userUploadImagePost(
        @Parameter(name = "image", description = "", required = true) @RequestPart(value = "image", required = true) MultipartFile image
    );

}
